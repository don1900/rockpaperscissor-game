h1{
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    padding-left: 28px;
    text-decoration: underline crimson;
}

h2{
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    padding-left: 30px;
    padding-top: 20px;
}
.main{
    padding-top: 10px;
    color:white;
}
.main-div{
    background-color: crimson;
    /* height: 200px; */
}

li{
    list-style: none;
}
ul{
    margin-left: 20px;
    padding-top: 20px;
    display: flex;
}
button{
    padding-left: 10px;
    font-size: 25px;
    display: flex;
    flex-direction: column;
    background: transparent;
    border: 2px solid transparent;
}

.rock i{
    padding-left: 20px;
}

.paper i{
    padding-left: 20px;
}
.scissor i{
    padding-left: 22px;
}
.choosen{
    font-size: 30px;
    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif ;
    text-align: center;
    padding-top: 30px;
}

@media only screen   
and (min-width: 1030px)   
and (max-width: 1366px)  {
    h1{
        padding-left: 37%;
    }
    h2{
        padding-left: 34%;
        font-size: 30px;
    }
    button{
        padding-left: 50px;
    }
    ul{
        padding-left: 32%;
    }
}

let userScore = 0;
let computerScore = 0;

document.getElementById('rock').addEventListener('click', () => playGame('rock'));
document.getElementById('paper').addEventListener('click', () => playGame('paper'));
document.getElementById('scissors').addEventListener('click', () => playGame('scissors'));

function playGame(userChoice) {
    const computerChoice = getComputerChoice();
    const result = determineWinner(userChoice, computerChoice);
    updateScore(result);
    displayResult(result, userChoice, computerChoice);
    animateChoices(userChoice, computerChoice);
}

function getComputerChoice() {
    const choices = ['rock', 'paper', 'scissors'];
    const randomIndex = Math.floor(Math.random() * choices.length);
    return choices[randomIndex];
}

function determineWinner(user, computer) {
    if (user === computer) {
        return 'tie';
    } else if (
        (user === 'rock' && computer === 'scissors') ||
        (user === 'paper' && computer === 'rock') ||
        (user === 'scissors' && computer === 'paper')
    ) {
        return 'win';
    } else {
        return 'lose';
    }
}

function updateScore(result) {
    if (result === 'win') {
        userScore++;
        document.getElementById('user-score').innerText = `User: ${userScore}`;
    } else if (result === 'lose') {
        computerScore++;
        document.getElementById('computer-score').innerText = `Computer: ${computerScore}`;
    }
}

function displayResult(result, userChoice, computerChoice) {
    const resultDiv = document.getElementById('result');
    resultDiv.classList.remove('result-win', 'result-lose', 'result-tie');

    if (result === 'win') {
        resultDiv.innerText = `You win! ${userChoice} beats ${computerChoice}.`;
        resultDiv.style.color = 'green';
        resultDiv.classList.add('result-win');
    } else if (result === 'lose') {
        resultDiv.innerText = `You lose! ${computerChoice} beats ${userChoice}.`;
        resultDiv.style.color = 'red';
        resultDiv.classList.add('result-lose');
    } else {
        resultDiv.innerText = `It's a tie! You both chose ${userChoice}.`;
        resultDiv.style.color = 'gray';
        resultDiv.classList.add('result-tie');
    }
}

function animateChoices(userChoice, computerChoice) {
    const userButton = document.getElementById(userChoice);
    const computerButton = document.createElement('button');
    computerButton.innerText = computerChoice;
    computerButton.className = 'choices';
    document.body.appendChild(computerButton);

    userButton.classList.add('animated-choice');
    computerButton.classList.add('animated-choice');

    setTimeout(() => {
        userButton.classList.remove('animated-choice');
        computerButton.remove();
    }, 600);
}
